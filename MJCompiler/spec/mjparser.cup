package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   public int error_sync_size(){
   	return 1;
   }
   public void ispisi_poruku(String message){
   	log.error(message);
   
   }
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal AND, BREAK, CASE,  CLASS, COLON, COMMA, CONST, CONTINUE, DIV, DO; 
terminal DOT, ELSE, ENUM, EQUAL, EXTENDS, GE, GT, IF, LBRACE, LCURVPAREN; 
terminal LE, LPAREN, LT, MINUS, MINUSMINUS, MUL, NEW, NOTSAME, OR, PLUS; 
terminal  PLUSPLUS, PRINT, PROG,QUESTION, RBRACE, RCURVPAREN, READ, REM, RETURN, SEMI,  RPAREN, VOID, WHILE, SWITCH, SAME;
terminal String IDENT, STRING;
terminal String BOOL;
terminal Integer NUMBER;
terminal Character CHAR;
nonterminal Program, NoMethodDeclList, MethodDeclList; 
nonterminal NoMethodDecl, ConstDecl, VarDecl, ClassDecl;
nonterminal ConstInitList;
nonterminal VarInitList, VarInit ;  
nonterminal ClassDeclList , MethodDecl;
nonterminal FormalParamList, VarDeclList ;
nonterminal FormalParam ;
nonterminal Statement, StatementList, CaseList, SwitchClause,   ReturnStatement, PrintNumConst, PrintExpr;
nonterminal DesignatorStatement, DesingatorOption, ActualParameterList, ActualParams ;
nonterminal ConditionFactRelOp ;
nonterminal TermOptions ;
nonterminal Matched, Unmatched;
nonterminal MinusExpr, ProgName, DoWhileClause;
nonterminal ConstDeclList, AddopTermExprOption;
nonterminal DesignatorOptionList, FormalParams ;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, StdConstType, ExtendsClause, ReturnType ;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstInit, ClassName, MethodName, Break ; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term , Factor, Expr1 , Expr, TernaryCondition, TernaryColon ;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesignatorOption, DesignatorName, Else, IfErrorCorection, Case , CaseClause , DesignatorFunc  ;
nonterminal rs.etf.pp1.symboltable.concepts.Struct  Assignop , Relop , Addop, Mulop, AddopList;
nonterminal DoClause, ClassFields ;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition , ConditionTerm, ConditonFact, ConditionLeft, ConditionTermLeft;

precedence left ELSE;

Program ::= (Program)PROG ProgName NoMethodDeclList LCURVPAREN MethodDeclList RCURVPAREN
				;
ProgName ::= (ProgName) IDENT:progName ;
NoMethodDeclList ::= (NoMethodDeclList_) NoMethodDeclList NoMethodDecl
					|
					(NoMethodDeclEmptyList) /*epsilon*/
					;
NoMethodDecl ::= (ConstDeclNoMethodDecl) ConstDecl 
				 |
				 (VarDeclNoMethodDecl) VarDecl
				 |
				 (ClassDeclNoMethodDecl) ClassDecl 
				 ;

ConstDeclList ::= (ConstDeclList) ConstDeclList ConstDecl;

ConstDecl ::= (ConstDecl) CONST Type:constType ConstInitList SEMI ;
ConstInitList ::= (ConstInitMultipleList) ConstInitList COMMA ConstInit
					|
				(ConstInitSingle) ConstInit
					;
ConstInit ::= (ConstInit) IDENT:name EQUAL StdConstType ;

StdConstType ::= (StdConstBool) BOOL:val
				|
				(StdConstNumber) NUMBER:val
				|
				(StdConstString) STRING:val
				|
				(StdConstChar) CHAR:val
				;
				

VarDeclList ::= (VarDeclList_) VarDeclList VarDecl
				|
				(VarDeclEmptyList) /* epsilon*/
				;
				
VarDecl ::= (VarDecl_) Type:varType VarInitList SEMI 
		 	;
		 	
VarInitList ::= (VarInitMultipleList) VarInitList COMMA VarInit
				|
				(VarInitSingle) VarInit:var
				|
				(VarInitError) error:l
				 {: parser.report_error("Izvrsen oporavak prom u liniji " + lleft, null);  :}
				;
				
VarInit ::= (VarInitPrimitive) IDENT:name
		   |
		   (VarInitArray) IDENT:name  LBRACE RBRACE 
		   ;

ClassDeclList ::= (ClassDeclList) ClassDeclList ClassDecl; 
					
ClassDecl ::= (ClassDeclsNoMethod) CLASS ClassName ExtendsClause LCURVPAREN ClassFields RCURVPAREN 
				|
			(ClassDeclMethod) CLASS ClassName ExtendsClause LCURVPAREN ClassFields LCURVPAREN MethodDeclList RCURVPAREN RCURVPAREN 
			;
ClassName ::= (ClassName) IDENT:className ;
ClassFields ::= (ClassFields_) VarDeclList
				|
				(ClassFieldsError) error:l 
				  {: parser.report_error("Izvrsen oporavak  do { u liniji " + lleft, null);  :}
				;
ExtendsClause ::= (ExtendsClause_) EXTENDS Type:extendType  
				|
				(NoExtendsClause) /* epsilon */
				|
				 (ExtendsErrorFixup)  error:l
				  {: parser.report_error("Izvrsen oporavak extends do { u liniji " + lleft, null);  :}
				;
				

MethodDeclList ::= (MethodDeclMultipleList) MethodDeclList MethodDecl
					|
					(MethodDeclEmptyList) /*epsilon*/
					; 
MethodDecl ::= (MethodDecl) ReturnType MethodName LPAREN FormalParams RPAREN VarDeclList LCURVPAREN StatementList RCURVPAREN ;

MethodName ::= (MethodName) IDENT:methodName;
ReturnType ::= (ReturnTypeType) Type:retType 
				|
				(ReturnTypeVoid) VOID
				;
FormalParams ::= (FormalParams_)  FormalParamList 
				;
FormalParamList ::= (FormalParamList_) FormalParam  COMMA  FormalParamList
				|
				(FormalParamSingle) FormalParam
				|
				(FormalParamEmptyList) /*epsilon*/				
				;
FormalParam ::= (FormalParamPrimitive) Type IDENT:paramName
				|
				(FormalParamArray) Type IDENT:paramName LBRACE RBRACE
				|
				(FormaParamError) error:l
				 {: parser.report_error("Izvrsen oporavak parametara fje u liniji " + lleft, null);  :}
				;

Type ::= (Type) IDENT:typeName ;


StatementList ::= (StatementList_) StatementList Statement
				|
				(StatementEmptyList) /*epsilon*/
				;


 
Statement   ::= (DesignatorStatementStatement) DesignatorStatement  
			|
			(DoWhileStatement) DoClause Statement DoWhileClause LPAREN Condition  RPAREN SEMI
			|
			(SwitchStatement) SwitchClause  LCURVPAREN CaseList RCURVPAREN 
		    |
		    (BreakStatement) Break SEMI
		    |
		    (ContinueStatement) CONTINUE SEMI
		    |
		    (ReturnStatement_) ReturnStatement SEMI
		    |
		    (ReadStatement) READ LPAREN Designator RPAREN SEMI
		    |
		    (PrintStatement) PRINT LPAREN PrintExpr RPAREN SEMI
		    |
		    (StatementStatement) LCURVPAREN StatementList RCURVPAREN
		    |
		    (IfStatement) IF LPAREN IfErrorCorection  Statement 
		    |
		    (IfElseStatement) IF  LPAREN IfErrorCorection Statement  Else Statement
		    ;


DoClause ::= (DoClause) DO ;
DoWhileClause ::= (DoWhileClause) WHILE;
Else  ::= (Else) ELSE ;
Break ::= (Break) BREAK;
SwitchClause ::= (SwitchClause) SWITCH LPAREN  Expr RPAREN ;
		    
IfErrorCorection ::= (IfCondition) Condition RPAREN  
					|
					(IfError) error RPAREN:l
					 {: parser.report_error("Izvrsen oporavak if do ) u liniji " + lleft, null);  :}
						;
    
CaseList ::= (CaseList_) CaseList Case
			 |
			 (CaseSingle) Case 
			 ;
Case  ::= (Case) CaseClause StatementList ; /*DA LI IDE STATEMENT ILI STATEMENTLIST*/

CaseClause ::=	(CaseClause) CASE NUMBER:value COLON ;


ReturnStatement ::= (ReturnStatementNoExpr) RETURN
					|
					(ReturnStatementExpr) RETURN Expr
					;
PrintExpr ::= (PrintExpr) Expr PrintNumConst ;
PrintNumConst ::= (PrintNumConst_)   COMMA NUMBER:val
					| 
					(NoPrintNumConst) /*epsilon*/
					; 

DesignatorStatement ::= (DesignatorStatementAssignop) Designator Assignop Expr SEMI
						|
					(DesignatorStatementFuncCall) DesignatorFunc LPAREN ActualParameterList RPAREN SEMI
					|
					(DesignatorStatementInc) Designator PLUSPLUS SEMI
					|
					(DesignatoStatementDec) Designator MINUSMINUS SEMI
					|
					(ErrorDesignator) error SEMI:l
		    {: parser.report_error("Izvrsen oporavak designator do ; u liniji " + lleft, null);  :}
						;
						
DesignatorFunc ::= (DesignatorFunc) Designator ;					


ActualParameterList ::= (ActualParameterList_) ActualParams
						|
					(ActualParameterEmptyList) /*epsilon*/
					;
ActualParams ::= (ActualParameterMultipleList)  Expr COMMA ActualParams  
					|
					(ActualParameterSingle) Expr
					;

Condition ::= (ConditionOR) ConditionLeft OR ConditionTerm
			|
			(NoConditionOR) ConditionTerm
			;
ConditionLeft ::= (ConditionLeft) Condition ;
ConditionTerm ::= (ConditionAND) ConditionTermLeft AND ConditonFact
				|
				(NoConditionAND) ConditonFact
				;
ConditionTermLeft ::= (ConditionTermLeft) ConditionTerm;
ConditonFact ::= (ConditionFactExpr) Expr  
				|
				(ConditionFactExprRelop) Expr Relop Expr
				;

/* ****************************************** */
Expr ::= (TernaryExpr) TernaryCondition QUESTION Expr1:firstExpression  TernaryColon Expr1:secondExpression 
		|
		(Expression) Expr1
		;	
TernaryCondition ::= (TernaryCondition) Expr1;
TernaryColon ::= (TernaryColon) COLON ;		    
Expr1 ::= (Expr1TermMinus) MINUS  Term AddopList
			|
		(Expr1TermNoMinus) Term AddopList
			;

		
AddopList ::= (AddopMultipleList) AddopList Addop Term 
				|
				(AddopEmptyList) /*epsilon*/
				; 


						 	

Term ::= (TermNoMul) Factor 
		|
		(TermMul) Term Mulop Factor
		 ;

		    
	
		    
Factor ::= (FactorFunctionCall) DesignatorFunc LPAREN ActualParameterList RPAREN
			|
			(FactorDesignator) Designator
			|
			(FactorNumber) NUMBER:val
						| 
			(FactorString) STRING:val
			|
			(FactorChar) CHAR:val
			|
			(FactorBool) BOOL:val
			|
			(FactorNew) NEW Type
			|
			(FactorNewExpr) NEW Type LBRACE Expr RBRACE
			|
			(FactorExpr) LPAREN Expr RPAREN
			;







Designator ::= (Designator) DesignatorName DesignatorOptionList ;
DesignatorName ::= (DesignatorName) IDENT:name;
DesignatorOptionList ::= (DesignatorOptionList_)  DesignatorOption DesignatorOptionList 
						|
						(DesignatorOptionEmptyList) /*epsilon*/
						;
DesignatorOption ::= (DesignatorDotIdentOption) DOT IDENT:name
					|
					(DesignatorIndexingOption) LBRACE Expr RBRACE
					;






Assignop ::= (Equal) EQUAL ;
Relop ::= (Same) SAME
		 |
		 (NotSame) NOTSAME
		 |
		 (GreaterThen) GT
		 |
		 (GreaterEqual) GE
		 |
		 (LessThen) LT
		 |
		 (LessEqual) LE
		 ;
		 
Addop ::= (Plus) PLUS
			|
			(Minus) MINUS
			;
Mulop ::= 	(Mul) MUL
			|
			(Div) DIV
			|
			(Rem) REM
			;

			
