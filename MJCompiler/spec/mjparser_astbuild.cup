package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   public void ispisi_poruku(String message){
   	log.error(message);
   
   }
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal AND, BREAK, CASE,  CLASS, COLON, COMMA, CONST, CONTINUE, DIV, DO; 
terminal DOT, ELSE, ENUM, EQUAL, EXTENDS, GE, GT, IF, LBRACE, LCURVPAREN; 
terminal LE, LPAREN, LT, MINUS, MINUSMINUS, MUL, NEW, NOTSAME, OR, PLUS; 
terminal  PLUSPLUS, PRINT, PROG,QUESTION, RBRACE, RCURVPAREN, READ, REM, RETURN, SEMI,  RPAREN, VOID, WHILE, SWITCH, SAME;
terminal String IDENT, STRING;
terminal String BOOL;
terminal Integer NUMBER;
terminal Character CHAR;
nonterminal Program Program;
nonterminal NoMethodDeclList NoMethodDeclList;
nonterminal MethodDeclList MethodDeclList; 
nonterminal NoMethodDecl NoMethodDecl;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal ConstInitList ConstInitList;
nonterminal VarInitList VarInitList;
nonterminal VarInit VarInit ;  
nonterminal ClassDeclList ClassDeclList ;
nonterminal MethodDecl MethodDecl;
nonterminal FormalParamList FormalParamList;
nonterminal VarDeclList VarDeclList ;
nonterminal FormalParam FormalParam ;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal CaseList CaseList;
nonterminal Case Case;
nonterminal ReturnStatement ReturnStatement;
nonterminal PrintNumConst PrintNumConst;
nonterminal PrintExpr PrintExpr;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesingatorOption DesingatorOption;
nonterminal ActualParameterList ActualParameterList ;
nonterminal Condition Condition ;
nonterminal ConditionTerm ConditionTerm;
nonterminal ConditonFact ConditonFact;
nonterminal ConditionFactRelOp ConditionFactRelOp ;
nonterminal TermOptions TermOptions ;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;
nonterminal MinusExpr MinusExpr;
nonterminal ProgName ProgName;
nonterminal ConstDeclList ConstDeclList;
nonterminal AddopTermExprOption AddopTermExprOption;
nonterminal DesignatorOptionList DesignatorOptionList;
nonterminal FormalParams FormalParams;
nonterminal IfErrorCorection IfErrorCorection;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, StdConstType, ExtendsClause, ReturnType ;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstInit, ClassName, MethodName ; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term , Factor, Expr ;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesignatorOption, DesignatorName ;
nonterminal rs.etf.pp1.symboltable.concepts.Struct  Assignop , Relop , Addop, Mulop, AddopList;




precedence left ELSE;
start with Program;

Program ::= (Program) PROG ProgName:P1 NoMethodDeclList:N2 LCURVPAREN MethodDeclList:M3 RCURVPAREN
				{:
				CUP$MJParser$stack.add(0,o);
				parser.ispisi_poruku("ovde");
				
				:} {: RESULT=new Program(P1, N2, M3); RESULT.setLine(P1left); :}
				;
ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :} ;
NoMethodDeclList ::= (NoMethodDeclList_) NoMethodDeclList:N1 NoMethodDecl:N2 {: RESULT=new NoMethodDeclList_(N1, N2); RESULT.setLine(N1left); :}
					|
					(NoMethodDeclEmptyList) {: RESULT=new NoMethodDeclEmptyList(); :} /*epsilon*/
					;
NoMethodDecl ::= (ConstDeclNoMethodDecl) ConstDecl:C1 {: RESULT=new ConstDeclNoMethodDecl(C1); RESULT.setLine(C1left); :} 
				 |
				 (VarDeclNoMethodDecl) VarDecl:V1 {: RESULT=new VarDeclNoMethodDecl(V1); RESULT.setLine(V1left); :}
				 |
				 (ClassDeclNoMethodDecl) ClassDecl:C1 {: RESULT=new ClassDeclNoMethodDecl(C1); RESULT.setLine(C1left); :} 
				 ;

ConstDeclList ::= (ConstDeclList) ConstDeclList:C1 ConstDecl:C2 {: RESULT=new ConstDeclList(C1, C2); RESULT.setLine(C1left); :};

ConstDecl ::= (ConstDecl) CONST Type:constType ConstInitList:C1 SEMI {: RESULT=new ConstDecl(constType, C1); RESULT.setLine(constTypeleft); :} ;
ConstInitList ::= (ConstInitMultipleList) ConstInitList:C1 COMMA ConstInit:C2 {: RESULT=new ConstInitMultipleList(C1, C2); RESULT.setLine(C1left); :}
					|
				(ConstInitSingle) ConstInit:C1 {: RESULT=new ConstInitSingle(C1); RESULT.setLine(C1left); :}
					;
ConstInit ::= (ConstInit) IDENT:name EQUAL StdConstType:S1 {: RESULT=new ConstInit(name, S1); RESULT.setLine(nameleft); :} ;

StdConstType ::= (StdConstBool) BOOL:val {: RESULT=new StdConstBool(val); RESULT.setLine(valleft); :}
				|
				(StdConstNumber) NUMBER:val {: RESULT=new StdConstNumber(val); RESULT.setLine(valleft); :}
				|
				(StdConstString) STRING:val {: RESULT=new StdConstString(val); RESULT.setLine(valleft); :}
				|
				(StdConstChar) CHAR:val {: RESULT=new StdConstChar(val); RESULT.setLine(valleft); :}
				;
					

VarDeclList ::= (VarDeclList_) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclList_(V1, V2); RESULT.setLine(V1left); :}
				|
				(VarDeclEmptyList) {: RESULT=new VarDeclEmptyList(); :} /* epsilon*/
				;
				
VarDecl ::= (VarDecl_) Type:varType VarInitList:V1 SEMI {: RESULT=new VarDecl_(varType, V1); RESULT.setLine(varTypeleft); :} 
		 	|
		 	(VarDeclError) error SEMI:l
		 	 {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new VarDeclError(); :}
		 	;
		 	
VarInitList ::= (VarInitMultipleList) VarInitList:V1 COMMA VarInit:V2 {: RESULT=new VarInitMultipleList(V1, V2); RESULT.setLine(V1left); :}
				|
				(VarInitSingle) VarInit:var {: RESULT=new VarInitSingle(var); RESULT.setLine(varleft); :}
				|
				(VarInitError) error COMMA:l
				 {: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :} {: RESULT=new VarInitError(); :}
				;
				
VarInit ::= (VarInitPrimitive) IDENT:name {: RESULT=new VarInitPrimitive(name); RESULT.setLine(nameleft); :}
		   |
		   (VarInitArray) IDENT:name  LBRACE RBRACE {: RESULT=new VarInitArray(name); RESULT.setLine(nameleft); :} 
		   ;

ClassDeclList ::= (ClassDeclList) ClassDeclList:C1 ClassDecl:C2 {: RESULT=new ClassDeclList(C1, C2); RESULT.setLine(C1left); :}; 
					
ClassDecl ::= (ClassDeclsNoMethod) CLASS ClassName:C1 ExtendsClause:E2 LCURVPAREN VarDeclList:V3 RCURVPAREN {: RESULT=new ClassDeclsNoMethod(C1, E2, V3); RESULT.setLine(C1left); :} 
				|
			(ClassDeclMethod) CLASS ClassName:C1 ExtendsClause:E2 LCURVPAREN VarDeclList:V3 LCURVPAREN MethodDeclList:M4 RCURVPAREN RCURVPAREN {: RESULT=new ClassDeclMethod(C1, E2, V3, M4); RESULT.setLine(C1left); :} 
			;
ClassName ::= (ClassName) IDENT:className {: RESULT=new ClassName(className); RESULT.setLine(classNameleft); :} ;
ExtendsClause ::= (ExtendsClause_) EXTENDS Type:extendType {: RESULT=new ExtendsClause_(extendType); RESULT.setLine(extendTypeleft); :} 
				|
				(NoExtendsClause) {: RESULT=new NoExtendsClause(); :} /*epsilon*/
				;
				

MethodDeclList ::= (MethodDeclMultipleList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclMultipleList(M1, M2); RESULT.setLine(M1left); :}
					|
					(MethodDeclEmptyList) {: RESULT=new MethodDeclEmptyList(); :} /*epsilon*/
					; 
MethodDecl ::= (MethodDecl) ReturnType:R1 MethodName:M2 LPAREN FormalParams:F3 VarDeclList:V4 LCURVPAREN StatementList:S5 RCURVPAREN {: RESULT=new MethodDecl(R1, M2, F3, V4, S5); RESULT.setLine(R1left); :} ;

MethodName ::= (MethodName) IDENT:methodName {: RESULT=new MethodName(methodName); RESULT.setLine(methodNameleft); :};
ReturnType ::= (ReturnTypeType) Type:retType {: RESULT=new ReturnTypeType(retType); RESULT.setLine(retTypeleft); :} 
				|
				(ReturnTypeVoid) VOID {: RESULT=new ReturnTypeVoid(); :}
				;
FormalParams ::= (FormalParams_)  FormalParamList:F1 RPAREN {: RESULT=new FormalParams_(F1); RESULT.setLine(F1left); :}
				|
				(FormalParamsError) error RPAREN:l
							 {: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null);  :} {: RESULT=new FormalParamsError(); :}
				;
FormalParamList ::= (FormalParamList_) FormalParamList:F1 COMMA FormalParam:F2 {: RESULT=new FormalParamList_(F1, F2); RESULT.setLine(F1left); :}
				|
				(FormalParamSingle) FormalParam:F1 {: RESULT=new FormalParamSingle(F1); RESULT.setLine(F1left); :}
				|
				(FormaParamError) error COMMA:l
				 {: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :} {: RESULT=new FormaParamError(); :}
				|
				(FormalParamEmptyList) {: RESULT=new FormalParamEmptyList(); :} /*epsilon*/				
				;
FormalParam ::= (FormalParamPrimitive) Type:T1 IDENT:paramName {: RESULT=new FormalParamPrimitive(T1, paramName); RESULT.setLine(T1left); :}
				|
				(FormalParamArray) Type:T1 IDENT:paramName LBRACE RBRACE {: RESULT=new FormalParamArray(T1, paramName); RESULT.setLine(T1left); :}
				;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} ;


StatementList ::= (StatementList_) StatementList:S1 Statement:S2 {: RESULT=new StatementList_(S1, S2); RESULT.setLine(S1left); :}
				|
				(StatementEmptyList) {: RESULT=new StatementEmptyList(); :} /*epsilon*/
				;


 
Statement   ::= (DesignatorStatementStatement) DesignatorStatement:D1 {: RESULT=new DesignatorStatementStatement(D1); RESULT.setLine(D1left); :}  
			|
			(DoWhileStatement) DO Statement:S1 WHILE LPAREN Condition:C2 RPAREN SEMI {: RESULT=new DoWhileStatement(S1, C2); RESULT.setLine(S1left); :}
			|
			(SwitchStatement) SWITCH LPAREN  Expr:E1 RPAREN LCURVPAREN CaseList:C2 RCURVPAREN {: RESULT=new SwitchStatement(E1, C2); RESULT.setLine(E1left); :} 
		    |
		    (BreakStatement) BREAK SEMI {: RESULT=new BreakStatement(); :}
		    |
		    (ContinueStatement) CONTINUE SEMI {: RESULT=new ContinueStatement(); :}
		    |
		    (ReturnStatement_) ReturnStatement:R1 SEMI {: RESULT=new ReturnStatement_(R1); RESULT.setLine(R1left); :}
		    |
		    (ReadStatement) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
		    |
		    (PrintStatement) PRINT LPAREN PrintExpr:P1 RPAREN SEMI {: RESULT=new PrintStatement(P1); RESULT.setLine(P1left); :}
		    |
		    (StatementStatement) LCURVPAREN StatementList:S1 RCURVPAREN {: RESULT=new StatementStatement(S1); RESULT.setLine(S1left); :}
		    |
		    (IfStatement) IF LPAREN IfErrorCorection:I1  Statement:S2 {: RESULT=new IfStatement(I1, S2); RESULT.setLine(I1left); :} 
		    |
		    (IfElseStatement) IF  LPAREN IfErrorCorection:I1 Statement:S2 ELSE Statement:S3 {: RESULT=new IfElseStatement(I1, S2, S3); RESULT.setLine(I1left); :}
		    ;
		    
		    
IfErrorCorection ::= (IfCondition) Condition:C1 RPAREN {: RESULT=new IfCondition(C1); RESULT.setLine(C1left); :}  
					|
					(IfError) error RPAREN:l
					 {: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null);  :} {: RESULT=new IfError(); :}
						;
    
CaseList ::= (CaseList_) CaseList:C1 Case:C2 {: RESULT=new CaseList_(C1, C2); RESULT.setLine(C1left); :}
			 |
			 (CaseSingle) Case:C1 {: RESULT=new CaseSingle(C1); RESULT.setLine(C1left); :} 
			 ;
Case  ::= (Case) CASE NUMBER:N1 COLON StatementList:S2 {: RESULT=new Case(N1, S2); RESULT.setLine(N1left); :} ; /*DA LI IDE STATEMENT ILI STATEMENTLIST*/

ReturnStatement ::= (ReturnStatementNoExpr) RETURN {: RESULT=new ReturnStatementNoExpr(); :}
					|
					(ReturnStatementExpr) RETURN Expr:E1 {: RESULT=new ReturnStatementExpr(E1); RESULT.setLine(E1left); :}
					;
PrintExpr ::= (PrintExpr) Expr:E1 PrintNumConst:P2 {: RESULT=new PrintExpr(E1, P2); RESULT.setLine(E1left); :} ;
PrintNumConst ::= (PrintNumConst_)   COMMA NUMBER:val {: RESULT=new PrintNumConst_(val); RESULT.setLine(valleft); :}
					| 
					(NoPrintNumConst) {: RESULT=new NoPrintNumConst(); :} /*epsilon*/
					; 

DesignatorStatement ::= (DesignatorStatement_) Designator:D1 DesingatorOption:D2 SEMI {: RESULT=new DesignatorStatement_(D1, D2); RESULT.setLine(D1left); :}
						|
						(ErrorDesignator) error SEMI:l
		    {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorDesignator(); :}
						;
DesingatorOption ::= (AssignopExpr) Assignop:A1 Expr:E2 {: RESULT=new AssignopExpr(A1, E2); RESULT.setLine(A1left); :}
					|
					LPAREN ActualParameterList:A1 RPAREN {: RESULT=new DesingatorOptionDerived1(A1); RESULT.setLine(A1left); :}
					|
					(IncDesignator) PLUSPLUS {: RESULT=new IncDesignator(); :}
					|
					(DecDesignator) MINUSMINUS {: RESULT=new DecDesignator(); :}
					;



ActualParameterList ::= (ActualParameterMultipleList)  ActualParameterList:A1 COMMA Expr:E2 {: RESULT=new ActualParameterMultipleList(A1, E2); RESULT.setLine(A1left); :}
					|
					(ActualParameterSingle) Expr:E1 {: RESULT=new ActualParameterSingle(E1); RESULT.setLine(E1left); :}
					|
					(ActualParameterEmptyList) {: RESULT=new ActualParameterEmptyList(); :} /*epsilon*/
					;
Condition ::= (ConditionOR)Condition:C1 OR ConditionTerm:C2 {: RESULT=new ConditionOR(C1, C2); RESULT.setLine(C1left); :}
			|
			(NoConditionOR) ConditionTerm:C1 {: RESULT=new NoConditionOR(C1); RESULT.setLine(C1left); :}
			;
ConditionTerm ::= (ConditionAND) ConditionTerm:C1 AND ConditonFact:C2 {: RESULT=new ConditionAND(C1, C2); RESULT.setLine(C1left); :}
				|
				(NoConditionAND) ConditonFact:C1 {: RESULT=new NoConditionAND(C1); RESULT.setLine(C1left); :}
				;
ConditonFact ::= (ConditionFactExpr) Expr:E1 {: RESULT=new ConditionFactExpr(E1); RESULT.setLine(E1left); :}  
				|
				(ConditionFactExprRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new ConditionFactExprRelop(E1, R2, E3); RESULT.setLine(E1left); :}
				;

/* ****************************************** */
		    
Expr ::= (ExprTermMinus) MINUS  Term:T1 AddopList:A2 {: RESULT=new ExprTermMinus(T1, A2); RESULT.setLine(T1left); :}
			|
		(ExprTermNoMinus) Term:T1 AddopList:A2 {: RESULT=new ExprTermNoMinus(T1, A2); RESULT.setLine(T1left); :}
			;
		/*	
		(ConditionTernary) Condition QUESTION Expr COLON Expr
			;
		  |
		 (ConditionTernary) Condition QUESTION Expr COLON Expr
			 
			
		; */
AddopList ::= (AddopMultipleList) AddopList:A1 Addop:A2 Term:T3 {: RESULT=new AddopMultipleList(A1, A2, T3); RESULT.setLine(A1left); :} 
				|
				(AddopEmptyList) {: RESULT=new AddopEmptyList(); :} /*epsilon*/
				; 


						 	

Term ::= (TermNoMul) Factor:F1 {: RESULT=new TermNoMul(F1); RESULT.setLine(F1left); :} 
		|
		(TermMul) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermMul(T1, M2, F3); RESULT.setLine(T1left); :}
		 ;

		    
	
		    
Factor ::= (FactorFunctionCall) Designator:D1 LPAREN ActualParameterList:A2 RPAREN {: RESULT=new FactorFunctionCall(D1, A2); RESULT.setLine(D1left); :}
			|
			(FactorDesignator) Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :}
			|
			(FactorNumber) NUMBER:val {: RESULT=new FactorNumber(val); RESULT.setLine(valleft); :}
						| 
			(FactorString) STRING:val {: RESULT=new FactorString(val); RESULT.setLine(valleft); :}
			|
			(FactorChar) CHAR:val {: RESULT=new FactorChar(val); RESULT.setLine(valleft); :}
			|
			(FactorBool) BOOL:val {: RESULT=new FactorBool(val); RESULT.setLine(valleft); :}
			|
			(FactorNew) NEW Type:T1 {: RESULT=new FactorNew(T1); RESULT.setLine(T1left); :}
			|
			(FactorNewExpr) NEW Type:T1 LBRACE Expr:E2 RBRACE {: RESULT=new FactorNewExpr(T1, E2); RESULT.setLine(T1left); :}
			|
			(FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
			;



Designator ::= (Designator) DesignatorName:D1 DesignatorOptionList:D2 {: RESULT=new Designator(D1, D2); RESULT.setLine(D1left); :} ;
DesignatorName ::= (DesignatorName) IDENT:name {: RESULT=new DesignatorName(name); RESULT.setLine(nameleft); :};
DesignatorOptionList ::= (DesignatorOptionList_)  DesignatorOption:D1 DesignatorOptionList:D2 {: RESULT=new DesignatorOptionList_(D1, D2); RESULT.setLine(D1left); :} 
						|
						(DesignatorOptionEmptyList) {: RESULT=new DesignatorOptionEmptyList(); :} /*epsilon*/
						;
DesignatorOption ::= (DesignatorDotIdentOption) DOT IDENT:name {: RESULT=new DesignatorDotIdentOption(name); RESULT.setLine(nameleft); :}
					|
					(DesignatorIndexingOption) LBRACE Expr:E1 RBRACE {: RESULT=new DesignatorIndexingOption(E1); RESULT.setLine(E1left); :}
					;






Assignop ::= (Equal) EQUAL {: RESULT=new Equal(); :} ;
Relop ::= (Same) SAME {: RESULT=new Same(); :}
		 |
		 (NotSame) NOTSAME {: RESULT=new NotSame(); :}
		 |
		 (GreaterThen) GT {: RESULT=new GreaterThen(); :}
		 |
		 (GreaterEqual) GE {: RESULT=new GreaterEqual(); :}
		 |
		 (LessThen) LT {: RESULT=new LessThen(); :}
		 |
		 (LessEqual) LE {: RESULT=new LessEqual(); :}
		 ;
		 
Addop ::= (Plus) PLUS {: RESULT=new Plus(); :}
			|
			(Minus) MINUS {: RESULT=new Minus(); :}
			;
Mulop ::= 	(Mul) MUL {: RESULT=new Mul(); :}
			|
			(Div) DIV {: RESULT=new Div(); :}
			|
			(Rem) REM {: RESULT=new Rem(); :}
			;

			
